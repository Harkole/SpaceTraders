@page "/createflightplan/{shipId}"
@inject NavigationManager _navManager;
@inject ApiService _apiService;

<div class="container border rounded-3 p-3">
    <h3><button type="button" title="Back" class="btn btn-close" @onclick="(() => NavigateBack())"></button> Create Flightplan</h3>
    @if (null != locations)
    {
        <div class="container">
            <div class="row">
                <div class="col-sm-3">
                    <p class="text-center col-form-label">Select Destination</p>
                </div>
                <div class="col-sm-3">
                    <select class="form-select" aria-label="Select Destination" @bind="systemSymbol">
                        @foreach (LocationDto location in locations)
                        {
                            <option value="@location.Symbol">
                                @if (location.Name == "Wormhole")
                                {
                                    @(location.Name + " " + location.Symbol)
                                }
                                else
                                {
                                    @location.Name
                                }
                            </option>
                        }
                    </select>
                </div>
                <div class="col-sm-3">
                    <button class="btn btn-primary" type="button" @onclick="CreateFlightPlanAsync">Submit</button>
                </div>
            </div>
        </div>
    }
</div>



@code {
    [Parameter]
    public string? ShipId { get; set; }

    private string? systemSymbol { get; set; }

    private IEnumerable<LocationDto>? locations;

    protected override async Task OnInitializedAsync()
    {
        RootShip? rootShip = await _apiService.Get<RootShip>($"/my/ships/{ShipId}");
        ShipDto? ship = rootShip?.Ship;

        if (null != ship?.Location && !string.IsNullOrEmpty(ship.Location))
        {
            string shipSystemSymbol = ship.Location.Substring(0, 2);
            LocationsDto? possibleLocations = await _apiService.Get<LocationsDto>($"/systems/{shipSystemSymbol}/locations");

            if (null != possibleLocations?.Locations)
            {
                locations = possibleLocations.Locations;
                systemSymbol = locations.FirstOrDefault()?.Symbol;
            }
        }
    }

    private async Task CreateFlightPlanAsync()
    {
        if (null != systemSymbol)
        {
            FlightPlanDto createFlightplan = new()
                {
                    ShipId = ShipId,
                    Destination = systemSymbol,
                };

            HttpResponseMessage response = await _apiService.PostContent<FlightPlanDto>("/my/flight-plans", createFlightplan);
            if (response.IsSuccessStatusCode)
            {
                _navManager.NavigateTo("/accountoverview");
            }
            else
            {
                Console.WriteLine(await response.Content.ReadAsStringAsync());
            }
        }
    }

    private void NavigateBack()
    {
        _navManager.NavigateTo("/accountoverview");
    }
}
